import matplotlib.pyplot as plt
import numpy as np

#simple vertically stacked panels
def ex2_1():
 xarray=np.arange(20)   #an array of numbers from 0 to 19
 yarray=np.arange(20)+3*np.random.randn(20)
 #y is same as x EXCEPT now we vary the value +/- some random number about x
 
 a,b=np.polyfit(xarray,yarray,1)
 #a polynomial fit of degree one look up the documentation if you are curious
 
 yarray2=(np.arange(20))**2.+20*np.random.randn(20)
 
 #polynomial of degree two
 a2,b2,c2=np.polyfit(xarray,yarray2,2)

 poly=np.poly1d(np.polyfit(xarray,yarray2,2))
 #a convenience class to write the polynomial fit

 fig,axes=plt.subplots(2,1)
 axes[0].plot(xarray,xarray*a+b,label='Linear fit with y = {0:.2f}*x + {1:.2f}'.format(a,b))
 axes[0].scatter(xarray,yarray,marker='o',s=150,alpha=0.7,label=r'$Random_{num}$')
 axes[0].legend(loc='best')

 axes[1].plot(xarray,poly(xarray),c='tab:green',label=r'Quadratic fit with y = {0:.2f}*$x^2$+{1:.2f}*$x$+{2:.2f}'.format(a2,b2,c2))

 axes[1].scatter(xarray,yarray2,marker='s',c='orange',s=50, label=r'$Random_{num}$, quadratic')
 axes[1].legend(loc='best',fontsize='xx-small')
 
 plt.show()

#vertically stacked panels
def ex2_2a():
 xarray=np.arange(20)   #an array of numbers from 0 to 19
 yarray=np.arange(20)+3*np.random.randn(20)
 #y is same as x EXCEPT now we vary the value +/- some random number about x
 
 a,b=np.polyfit(xarray,yarray,1)
 #a polynomial fit of degree one look up the documentation if you are curious
 
 yarray2=(np.arange(20))**2.+20*np.random.randn(20)
 
 #polynomial of degree two
 a2,b2,c2=np.polyfit(xarray,yarray2,2)

 poly=np.poly1d(np.polyfit(xarray,yarray2,2))
 #a convenience class to write the polynomial fit

 fig,axes=plt.subplots(2,1)

 fig.subplots_adjust(hspace=0.5)
 axes[0].plot(xarray,xarray*a+b,label='Linear fit with y = {0:.2f}*x + {1:.2f}'.format(a,b))
 axes[0].scatter(xarray,yarray,marker='o',s=150,alpha=0.7,label=r'$Random_{num}$')
 axes[0].legend(loc='best')

 axes[1].plot(xarray,poly(xarray),c='tab:green',label=r'Quadratic fit with y = {0:.2f}*$x^2$+{1:.2f}*$x$+{2:.2f}'.format(a2,b2,c2))

 axes[1].scatter(xarray,yarray2,marker='s',c='orange',s=50, label=r'$Random_{num}$, quadratic')
 axes[1].legend(loc='best',fontsize='small')

 for i in range(len(axes)):
 
  axes[i].set_xlabel('Initial $X_{Array}$',font='Verdana',size=14,color='black',weight='bold')
  axes[i].set_ylabel(r'Output,$Y_{Array, random}$',font='Verdana',size=14,color='black',weight='bold')
 
 plt.show()

#side-by-side panels
def ex2_2b():
 xarray=np.arange(20)   #an array of numbers from 0 to 19
 yarray=np.arange(20)+3*np.random.randn(20)
 #y is same as x EXCEPT now we vary the value +/- some random number about x
 
 a,b=np.polyfit(xarray,yarray,1)
 #a polynomial fit of degree one look up the documentation if you are curious
 
 yarray2=(np.arange(20))**2.+20*np.random.randn(20)
 
 #polynomial of degree two
 a2,b2,c2=np.polyfit(xarray,yarray2,2)

 poly=np.poly1d(np.polyfit(xarray,yarray2,2))
 #a convenience class to write the polynomial fit

 fig,axes=plt.subplots(1,2,figsize=(9.6,4.8)) 
#the default width is 6.4 inches by 4.8 inches, here increase width by 50%

 fig.subplots_adjust(wspace=0.325)
 axes[0].plot(xarray,xarray*a+b,label='Linear fit with y = {0:.2f}*x + {1:.2f}'.format(a,b))
 axes[0].scatter(xarray,yarray,marker='o',s=150,alpha=0.7,label=r'$Random_{num}$')
 axes[0].legend(loc='upper left',fontsize='x-small',handlelength=1,markerscale=0.85)

 axes[1].plot(xarray,poly(xarray),c='tab:green',label=r'Quadratic fit with y = {0:.2f}*$x^2$+{1:.2f}*$x$+{2:.2f}'.format(a2,b2,c2))

 axes[1].scatter(xarray,yarray2,marker='s',c='orange',s=50, label=r'$Random_{num}$, quadratic')
 axes[1].legend(loc='upper left',fontsize='x-small',handlelength=1)

 for i in range(len(axes)):
 
  axes[i].set_xlabel('Initial $X_{Array}$',font='Verdana',size=14,color='black',weight='bold')
  axes[i].set_ylabel(r'Output,$Y_{Array, random}$',font='Verdana',size=14,color='black',weight='bold')
 
 plt.show()

def ex2_2c():

 #from matplotlib.ticker import FormatStrFormatter
 from matplotlib import ticker

 xarray=np.arange(20)   #an array of numbers from 0 to 19
 yarray=np.arange(20)+3*np.random.randn(20)
 #y is same as x EXCEPT now we vary the value +/- some random number about x
 
 a,b=np.polyfit(xarray,yarray,1)
 #a polynomial fit of degree one look up the documentation if you are curious
 
 yarray2=(np.arange(20))**2.+20*np.random.randn(20)
 
 #polynomial of degree two
 a2,b2,c2=np.polyfit(xarray,yarray2,2)

 poly=np.poly1d(np.polyfit(xarray,yarray2,2))
 #a convenience class to write the polynomial fit
 
 standardsize=np.array((6.4,4.8))
 scaleval=1.25
 newsize=list(scaleval*standardsize)

 fig,axes=plt.subplots(2,1,figsize=newsize) 
#the default width is 6.4 inches by 4.8 inches, here increase width by 25% using variables

 axes[0].yaxis.set_major_formatter(ticker.FormatStrFormatter('%.1f'))
 axes[1].yaxis.set_major_formatter(ticker.FormatStrFormatter('%.1f'))

 fig.subplots_adjust(hspace=0)
 axes[0].plot(xarray,xarray*a+b,label='Linear fit with y = {0:.2f}*x + {1:.2f}'.format(a,b))
 axes[0].scatter(xarray,yarray,marker='o',s=150,alpha=0.7,label=r'$Random_{num}$')
 axes[0].legend(loc='upper left',fontsize='x-small',handlelength=1,markerscale=0.85)

 axes[1].plot(xarray,poly(xarray),c='tab:green',label=r'Quadratic fit with y = {0:.2f}*$x^2$+{1:.2f}*$x$+{2:.2f}'.format(a2,b2,c2))

 axes[1].scatter(xarray,yarray2,marker='s',c='orange',s=50, label=r'$Random_{num}$, quadratic')
 axes[1].legend(loc='upper left',fontsize='x-small',handlelength=1)

 for i in range(len(axes)):

  if i > 1: 
   axes[i].set_xlabel('Initial $X_{Array}$',font='Verdana',size=14,color='black',weight='bold')
  axes[i].set_ylabel(r'Output,$Y_{Array, random}$',font='Verdana',size=14,color='black',weight='bold')
 
 plt.show()

#making 4 panels
def ex2_2dbk():

 #from matplotlib.ticker import FormatStrFormatter
 from matplotlib import ticker

 xarray=np.arange(20)   #an array of numbers from 0 to 19

#Panel 1 determination
 yarray=np.arange(20)+3*np.random.randn(20)
 #y is same as x EXCEPT now we vary the value +/- some random number about x
 
 a,b=np.polyfit(xarray,yarray,1)
 #a polynomial fit of degree one look up the documentation if you are curious

#Panel 2 determination 
 yarray2=(np.arange(20))**2.+20*np.random.randn(20)
 
 #polynomial of degree two
 a2,b2,c2=np.polyfit(xarray,yarray2,2)

 poly=np.poly1d(np.polyfit(xarray,yarray2,2))
 #a convenience class to write the polynomial fit


#Panel 3 determination

 yarray3=(np.arange(20))**2.+40*np.random.randn(20)
 
 #polynomial of degree two
 a3,b3,c3=np.polyfit(xarray,yarray3,2)

 poly2=np.poly1d(np.polyfit(xarray,yarray3,2))
 #a convenience class to write the polynomial fit


#Panel 1 determination
 yarray4=np.arange(20)+1.5*np.random.randn(20)
 #y is same as x EXCEPT now we vary the value +/- some random number about x
 
 a4,b4=np.polyfit(xarray,yarray4,1)
 #a polynomial fit of degree one look up the documentation if you are curious

 
 
 standardsize=np.array((6.4,4.8))
 scaleval=2
 newsize=list(scaleval*standardsize)

 fig,axes=plt.subplots(2,2,figsize=newsize,sharex=True)
#,sharey=True) 
 fig.subplots_adjust(hspace=0,wspace=0)

#the default width is 6.4 inches by 4.8 inches, here increase width by 25% using variables
 labels_fits = ['Linear fit with y = {0:.2f}*x + {1:.2f}'.format(a,b),r'Quadratic fit with y = {0:.2f}*$x^2$+{1:.2f}*$x$+{2:.2f}'.format(a2,b2,c2),
             r'Second Quadratic fit with y = {0:.2f}*$x^2$+{1:.2f}*$x$+{2:.2f}'.format(a3,b3,c3), 'Second Linear fit with y = {0:.2f}*x + {1:.2f}'.format(a4,b4)]

 labels_data=[r'$Random_{num}$',r'$Random_{num}$, quadratic',r'$Random_{num}$, quadratic (v2)',r'$Random_{num}$ (v2)']

 colors_data=['tab:blue','orange','lime','cyan']
 colors_fit=['tab:blue','tab:green','tab:brown','tab:gray']

 sizes_data=[150,50,100,75]
 marker_data=['o','s','^','X']
 alphas_data=[0.7,1,0.6,0.5]


 #ylabelpos=["left","right","left","right"] 

 axes[0,0].plot(xarray,xarray*a+b,label=labels_fits[0],c=colors_fit[0])
 axes[0,0].scatter(xarray,yarray,marker=marker_data[0],c=colors_data[0],s=sizes_data[0],alpha=alphas_data[0],label=labels_data[0])
 axes[0,0].legend(loc='upper left',fontsize='x-small',handlelength=1,markerscale=0.85)
 #axes[0,0].yaxis_tick_left()
 #axes[0,0].yaxis_set_label_position("left")


 axes[0,1].plot(xarray,xarray*a4+b4,c=colors_fit[3],label=labels_fits[3])
 axes[0,1].scatter(xarray,yarray4,marker=marker_data[3],c=colors_data[3],s=sizes_data[3], alpha=alphas_data[3],label=r'$Random_{num}$, quadratic')
 axes[0,1].legend(loc='upper left',fontsize='x-small',handlelength=1)
 #axes[0,1].yaxis_tick_right()
 #axes[0,1].yaxis_set_label_position("right")

 #axes[1,1].plot(xarray,xarray*a+b,label=labels_fits[0],c=colors_fit[0])
 #axes[1,1].scatter(xarray,yarray,marker=marker_data[0],c=colors_data[0],s=sizes_data[0],alpha=alphas_data[0],label=labels_data[0])
 #axes[1,1].legend(loc='upper left',fontsize='x-small',handlelength=1,markerscale=0.85)

 axes[1,0].plot(xarray,poly(xarray),label=labels_fits[1],c=colors_fit[1])
 axes[1,0].scatter(xarray,yarray2,marker=marker_data[1],c=colors_data[1],s=sizes_data[1],alpha=alphas_data[1],label=labels_data[1])
 axes[1,0].legend(loc='upper left',fontsize='x-small',handlelength=1,markerscale=0.85)
 #axes[1,0].yaxis_tick_left()
 #axes[1,0].yaxis_set_label_position("left")

 axes[1,1].plot(xarray,poly2(xarray),c=colors_fit[2],label=labels_fits[2])
 axes[1,1].scatter(xarray,yarray3,marker=marker_data[2],c=colors_data[2],s=sizes_data[2], label=labels_data[2],alpha=alphas_data[2])
 axes[1,1].legend(loc='upper left',fontsize='x-small',handlelength=1)
 #axes[1,1].yaxis_tick_right()
 #axes[1,1].yaxis_set_label_position("right")

#continue after here ... 5:26pm 6/12

 for ax in [axes[0,1],axes[1,1]]:
#  ax.set_yticks([])
 #for ax in [axes[0,1],axes[1,1]]:
  ax.yaxis.tick_right()
  ax.yaxis.set_tick_params(labelright='on',labelleft=False)
 #for i in range(len(axes)):
# for ax in axes.flat:
#  ax.yaxis.set_major_formatter(ticker.FormatStrFormatter('%.1f'))
 
# axes[0].yaxis.set_major_formatter(ticker.FormatStrFormatter('%.1f'))
# axes[1].yaxis.set_major_formatter(ticker.FormatStrFormatter('%.1f'))


# for i in range(len(axes)):
#
#  if i > 1: 
#   axes[i].set_xlabel('Initial $X_{Array}$',font='Verdana',size=14,color='black',weight='bold')
#   axes[i].set_ylabel(r'Output,$Y_{Array, random}$',font='Verdana',size=14,color='black',weight='bold')
  
# for ax in fig.get_axes():
 for i in range(len(axes)):
#   axes.yaxis.set_label_position(ylabelpos[i])
  ax.label_outer()
 plt.show()


#making 4 panels
def ex2_2d():

 #from matplotlib.ticker import FormatStrFormatter
 from matplotlib import ticker

 xarray=np.arange(20)   #an array of numbers from 0 to 19

#Panel 1 determination
 yarray=np.arange(20)+3*np.random.randn(20)
 #y is same as x EXCEPT now we vary the value +/- some random number about x
 
 a,b=np.polyfit(xarray,yarray,1)
 #a polynomial fit of degree one look up the documentation if you are curious

#Panel 2 determination 
 yarray2=(np.arange(20))**2.+20*np.random.randn(20)
 
 #polynomial of degree two
 a2,b2,c2=np.polyfit(xarray,yarray2,2)

 poly=np.poly1d(np.polyfit(xarray,yarray2,2))
 #a convenience class to write the polynomial fit


#Panel 3 determination

 yarray3=(np.arange(20))**2.+40*np.random.randn(20)
 
 #polynomial of degree two
 a3,b3,c3=np.polyfit(xarray,yarray3,2)

 poly2=np.poly1d(np.polyfit(xarray,yarray3,2))
 #a convenience class to write the polynomial fit


#Panel 1 determination
 yarray4=np.arange(20)+1.5*np.random.randn(20)
 #y is same as x EXCEPT now we vary the value +/- some random number about x
 
 a4,b4=np.polyfit(xarray,yarray4,1)
 #a polynomial fit of degree one look up the documentation if you are curious

 
 
 standardsize=np.array((6.4,4.8))
 scaleval=2
 newsize=list(scaleval*standardsize)

 fig,axes=plt.subplots(2,2,figsize=newsize,sharex=True)
#,sharey=True) 
 fig.subplots_adjust(hspace=0,wspace=0)

#the default width is 6.4 inches by 4.8 inches, here increase width by 25% using variables
 labels_fits = ['Linear fit with y = {0:.2f}*x + {1:.2f}'.format(a,b),'Second Linear fit with y = {0:.2f}*x + {1:.2f}'.format(a4,b4),
             r'Quadratic fit with y = {0:.2f}*$x^2$+{1:.2f}*$x$+{2:.2f}'.format(a2,b2,c2), r'Second Quadratic fit with y = {0:.2f}*$x^2$+{1:.2f}*$x$+{2:.2f}'.format(a3,b3,c3)]

 labels_data=[r'$Random_{num}$',r'$Random_{num}$ (v2)',r'$Random_{num}$, quadratic',r'$Random_{num}$, quadratic (v2)']

 colors_data=['tab:blue','lime','orange','cyan']
 colors_fit=['tab:blue','tab:brown','tab:green','tab:gray']

 sizes_data=[150,50,100,75]
 marker_data=['o','^','s','X']
 alphas_data=[0.7,1,0.6,0.5]

 eq=[xarray*a+b,xarray*a4+b4,poly(xarray),poly2(xarray)]
 dataarr=[yarray,yarray4,yarray2,yarray3]
 
 for i,ax in enumerate(axes.flat):
  ax.plot(xarray,eq[i],label=labels_fits[i],c=colors_fit[i])
  ax.scatter(xarray,dataarr[i],marker=marker_data[i],c=colors_data[i],s=sizes_data[i],alpha=alphas_data[i],label=labels_data[i])
  ax.legend(loc='upper left',fontsize='small',handlelength=1,markerscale=0.85)
  ax.set_xlabel('Initial $X_{Array}$',font='Verdana',size=14,color='black',weight='bold')
  ax.set_ylabel(r'Output,$Y_{Array, random}$',font='Verdana',size=14,color='black',weight='bold')

 for ax in [axes[0,1],axes[1,1]]:
  ax.yaxis.tick_right()
  ax.yaxis.set_tick_params(labelright='on',labelleft=False)
  #ax.set_ylabel(r'Output,$Y_{Array, random}$',font='Verdana',size=14,color='black',weight='bold')
  ax.yaxis.set_label_position("right")

 #for i,ax in enumerate(axes.flat):
 # ax.label_outer()
 plt.show()

